# Place a copy of this config to ~/.aerospace.toml
# After that, you can edit ~/.aerospace.toml to your liking

# It's not necessary to copy all keys to your config.
# If the key is missing in your config, "default-config.toml" will serve as a fallback

# You can use it to add commands that run after login to macOS user session.
# 'start-at-login' needs to be 'true' for 'after-login-command' to work
# Available commands: https://nikitabobko.github.io/AeroSpace/commands
after-login-command = []

# You can use it to add commands that run after AeroSpace startup.
# 'after-startup-command' is run after 'after-login-command'
# Available commands : https://nikitabobko.github.io/AeroSpace/commands
after-startup-command = []

# Start AeroSpace at login
start-at-login = true

# Normalizations. See: https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# See: https://nikitabobko.github.io/AeroSpace/guide#layouts
# The 'accordion-padding' specifies the size of accordion padding
# You can set 0 to disable the padding feature
accordion-padding = 30

# Possible values: tiles|accordion
default-root-container-layout = 'tiles'

# Possible values: horizontal|vertical|auto
# 'auto' means: wide monitor (anything wider than high) gets horizontal orientation,
#               tall monitor (anything higher than wide) gets vertical orientation
default-root-container-orientation = 'auto'

# Possible values: (qwerty|dvorak)
# See https://nikitabobko.github.io/AeroSpace/guide#key-mapping
key-mapping.preset = 'qwerty'

# Mouse follows focus when focused monitor changes
# Drop it from your config, if you don't like this behavior
# See https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks
# See https://nikitabobko.github.io/AeroSpace/commands#move-mouse
on-focused-monitor-changed = ['move-mouse monitor-lazy-center']
on-focus-changed = ['move-mouse window-lazy-center']

# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See: https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
inner.horizontal = 10
inner.vertical =   10
outer.left =       10
outer.bottom =     10
outer.top =        10
outer.right =      10

# 'main' binding mode declaration
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
# 'main' binding mode must be always presented
[mode.main.binding]

# All possible keys:
# - Letters.        a, b, c, ..., z
# - Numbers.        0, 1, 2, ..., 9
# - Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
# - F-keys.         f1, f2, ..., f20
# - Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon, backtick,
#                   leftSquareBracket, rightSquareBracket, space, enter, esc, backspace, tab
# - Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
#                   keypadMinus, keypadMultiply, keypadPlus
# - Arrows.         left, down, up, right

# All possible modifiers: cmd, alt, ctrl, shift

# All possible commands: https://nikitabobko.github.io/AeroSpace/commands

# You can uncomment this line to open up terminal with alt + enter shortcut
# See: https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
# alt-enter = 'exec-and-forget open -n /System/Applications/Utilities/Terminal.app'

# Hyper key (alt + shift + ctrl + cmd)
# Use hyper for moving windows and workspaces and other mutation actions

# See: https://nikitabobko.github.io/AeroSpace/commands#move
alt-shift-ctrl-cmd-h = 'move left'
alt-shift-ctrl-cmd-j = 'move down'
alt-shift-ctrl-cmd-k = 'move up'
alt-shift-ctrl-cmd-l = 'move right'

# See: https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
alt-shift-ctrl-cmd-1 = 'move-node-to-workspace 1'
alt-shift-ctrl-cmd-2 = 'move-node-to-workspace 2'
alt-shift-ctrl-cmd-b = 'move-node-to-workspace B' # Browser
alt-shift-ctrl-cmd-c = 'move-node-to-workspace C' # Communications
alt-shift-ctrl-cmd-e = 'move-node-to-workspace E' # Email
alt-shift-ctrl-cmd-f = 'move-node-to-workspace F' # Finder
alt-shift-ctrl-cmd-m = 'move-node-to-workspace M' # Music
alt-shift-ctrl-cmd-n = 'move-node-to-workspace N' # Notes
alt-shift-ctrl-cmd-p = 'move-node-to-workspace P' # Passwords
alt-shift-ctrl-cmd-t = 'move-node-to-workspace T' # Terminal

alt-shift-ctrl-cmd-enter = 'fullscreen'

# See: https://nikitabobko.github.io/AeroSpace/commands#mode
alt-shift-ctrl-cmd-semicolon = 'mode service'

# See: https://nikitabobko.github.io/AeroSpace/commands#resize
alt-shift-ctrl-cmd-left = 'resize smart -50'
alt-shift-ctrl-cmd-right = 'resize smart +50'

alt-shift-ctrl-cmd-equal = 'balance-sizes'

# Meh key (alt + shift + ctrl)
# Use meh for focusing windows and workspaces and other readonly actions

# See: https://nikitabobko.github.io/AeroSpace/commands#focus
alt-shift-ctrl-h = 'focus left'
alt-shift-ctrl-j = 'focus down'
alt-shift-ctrl-k = 'focus up'
alt-shift-ctrl-l = 'focus right'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace
alt-shift-ctrl-1 = 'workspace 1'
alt-shift-ctrl-2 = 'workspace 2'
alt-shift-ctrl-b = 'workspace B' # Browser
alt-shift-ctrl-c = 'workspace C' # Communications
alt-shift-ctrl-e = 'workspace E' # Email
alt-shift-ctrl-f = 'workspace F' # Finder
alt-shift-ctrl-m = 'workspace M' # Music
alt-shift-ctrl-n = 'workspace N' # Notes
alt-shift-ctrl-p = 'workspace P' # Passwords
alt-shift-ctrl-t = 'workspace T' # Terminal

# See: https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
alt-shift-ctrl-tab = ['move-node-to-monitor --wrap-around next', 'focus-monitor --wrap-around next']

# Alt key
# Use Alt for other bindings that don't work well with Hyper or Meh keys,
# due to awkward keypresses or simply not working, in the case of the layout switching bindings.

# See: https://nikitabobko.github.io/AeroSpace/commands#layout
alt-slash = 'layout tiles horizontal vertical'
alt-comma = 'layout accordion horizontal vertical'

# See: https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
alt-tab = 'workspace-back-and-forth'

# 'service' binding mode declaration.
# See: https://nikitabobko.github.io/AeroSpace/guide#binding-modes
[mode.service.binding]
esc = ['reload-config', 'mode main']
r = ['flatten-workspace-tree', 'mode main'] # reset layout
#s = ['layout sticky tiling', 'mode main'] # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
f = ['layout floating tiling', 'mode main'] # Toggle between floating and tiling layout
backspace = ['close-all-windows-but-current', 'mode main']

alt-shift-h = ['join-with left', 'mode main']
alt-shift-j = ['join-with down', 'mode main']
alt-shift-k = ['join-with up', 'mode main']
alt-shift-l = ['join-with right', 'mode main']

[workspace-to-monitor-force-assignment]
# I often need to move a window to another monitor when pairing or presenting to show the code and the UI side by side.
# When we want to move a window (a "node" in Aerospace) to another monitor, we should move it to a workspace on the other monitor (using the `move-workspace-to-monitor` command) instead of moving the entire workspace (with the `move-workspace-to-monitor` command). This way, we only move the specific window to the other monitor rather than transferring the whole workspace.
# Moving the node to the target workspace instead of the whole workspace ensures that the window is added to the workspace on the other monitor alongside other windows.

# The default setting for workspaces is "main", so we only need to define the workspaces we want to lock to the secondary screen.
2 = 'secondary'
B = 'secondary'
C = 'secondary'

# Workspace B (Browser)
[[on-window-detected]]
if.app-id = 'company.thebrowser.Browser'
run = 'move-node-to-workspace B'

# Workspace C (Communications)
[[on-window-detected]]
if.app-id = 'com.hnc.Discord'
run = 'move-node-to-workspace C'

# Workspace E (Email)
[[on-window-detected]]
if.app-id = 'com.readdle.SparkDesktop'
run = 'move-node-to-workspace E'

[[on-window-detected]]
if.app-id = 'com.flexibits.fantastical2.mac'
run = 'move-node-to-workspace E'

# Workspace F (Finder)
[[on-window-detected]]
if.app-id = 'com.apple.finder'
run = 'move-node-to-workspace F'

# Workspace M (Music)
[[on-window-detected]]
if.app-id = 'com.spotify.client'
run = 'move-node-to-workspace M'

# Workspace N (Notes)
[[on-window-detected]]
if.app-id = 'md.obsidian'
run = 'move-node-to-workspace N'

# Workspace P (Passwords)
[[on-window-detected]]
if.app-id = 'com.1password.1password'
# This avoids moving the browser popup to the "P" workspace too,
# as only the desktop app has the words "Lock Screen" in its window title.
if.window-title-regex-substring = "Lock Screen"
run = 'move-node-to-workspace P'

# Workspace T (Terminal)
[[on-window-detected]]
if.app-id = 'net.kovidgoyal.kitty'
run = 'move-node-to-workspace T'

[[on-window-detected]]
if.app-id = 'com.github.wez.wezterm'
run = 'move-node-to-workspace T'
